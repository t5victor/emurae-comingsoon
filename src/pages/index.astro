---

---

<html lang="es">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/png" href="https://opengraph.b-cdn.net/production/images/70cf0cd0-8cea-4ed2-bd40-d9ae29656c9f.png?token=XXLRPYPxDn9O7z-ykSGjJD2XhM7AmffrJ-TkUnTOE8A&height=430&width=1120&expires=33297723314" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<meta name="generator" content="The Neva Group" />
		<title>Emurae | Paneles de Piedra Flexibles</title>
		<meta name="description" content="Transforma tu terraza con materiales reciclados que no renuncian al diseño." />
		<meta property="og:url" content="https://emurae.com" />
		<meta property="og:type" content="website" />
		<meta property="og:title" content="Emurae | Paneles de Piedra Flexibles" />
		<meta property="og:description" content="Transforma tu terraza con materiales reciclados que no renuncian al diseño." />
		<meta
			property="og:image"
			content="https://opengraph.b-cdn.net/production/images/70cf0cd0-8cea-4ed2-bd40-d9ae29656c9f.png?token=XXLRPYPxDn9O7z-ykSGjJD2XhM7AmffrJ-TkUnTOE8A&height=430&width=1120&expires=33297723314"
		/>
		<meta name="twitter:card" content="summary_large_image" />
		<meta property="twitter:domain" content="emurae.com" />
		<meta property="twitter:url" content="https://emurae.com" />
		<meta name="twitter:title" content="Emurae | Paneles de Piedra Flexibles" />
		<meta name="twitter:description" content="Transforma tu terraza con materiales reciclados que no renuncian al diseño." />
		<meta
			name="twitter:image"
			content="https://opengraph.b-cdn.net/production/images/70cf0cd0-8cea-4ed2-bd40-d9ae29656c9f.png?token=XXLRPYPxDn9O7z-ykSGjJD2XhM7AmffrJ-TkUnTOE8A&height=430&width=1120&expires=33297723314"
		/>
		<style>
			:root {
				color-scheme: light dark;
				font-family: "SF Pro Display", -apple-system, BlinkMacSystemFont, "Segoe UI", sans-serif;
			}

			* {
				box-sizing: border-box;
			}

			body {
				margin: 0;
				min-height: 100vh;
				padding: clamp(2rem, 6vw, 5rem);
				display: flex;
				align-items: center;
				justify-content: center;
				background: #9e7560;
				color: #0f172a;
			}

			main {
				max-width: 960px;
				margin: 0 auto;
				display: grid;
				align-content: center;
				gap: 2.5rem;
				justify-items: center;
			}

			header {
				width: 100%;
				max-width: clamp(280px, 45vw, 520px);
			}

			.logo {
				width: 100%;
				height: auto;
				display: block;
			}

			h1 {
				margin: 0;
				font-size: clamp(2.6rem, 5vw, 4rem);
				line-height: 1.05;
				font-weight: 600;
				color: #ffffff;
			}

			p {
				margin: 0.25rem 0 0;
				max-width: 48ch;
				font-size: clamp(1.05rem, 2.2vw, 1.2rem);
				color: rgba(255, 255, 255, 0.82);
			}

			section {
				display: grid;
				gap: 1.75rem;
				width: 100%;
				max-width: clamp(280px, 45vw, 520px);
				text-align: center;
			}

			input[type="email"] {
				width: min(360px, 100%);
				padding: 0.95rem 1.2rem;
				border: 1px solid rgba(15, 23, 42, 0.12);
				border-radius: 6px;
				font-size: 1rem;
				color: #0f172a;
				background: rgba(255, 255, 255, 0.92);
				transition: border-color 0.2s ease, box-shadow 0.2s ease;
			}

			input[type="email"]::placeholder {
				color: rgba(15, 23, 42, 0.45);
			}

			input[type="email"]:focus {
				outline: none;
				border-color: #6366f1;
				box-shadow: 0 0 0 4px rgba(129, 140, 248, 0.2);
			}

			button {
				padding: 0.95rem 1.9rem;
				border: 1px solid rgba(255, 255, 255, 0.32);
				border-radius: 6px;
				font-size: 1rem;
				font-weight: 600;
				background: #ffffff;
				color: #0f172a;
				cursor: pointer;
				box-shadow: 0 4px 14px rgba(15, 23, 42, 0.18);
				transition: transform 0.2s ease, box-shadow 0.2s ease, border-color 0.2s ease, background 0.2s ease;
			}

			button:hover,
			button:focus-visible {
				transform: translateY(-2px);
				border-color: rgba(255, 255, 255, 0.6);
				background: #ffffff;
				box-shadow: 0 10px 24px rgba(15, 23, 42, 0.26);
			}

			form {
				display: flex;
				gap: 1rem;
				flex-wrap: wrap;
				justify-content: center;
			}

			.status {
				min-height: 1.2em;
				font-size: 0.9rem;
				color: rgba(255, 255, 255, 0.7);
			}

			.status[data-state="error"] {
				color: #fecaca;
			}

			.status[data-state="success"] {
				color: #bbf7d0;
			}

			footer {
				font-size: 0.9rem;
				color: rgba(255, 255, 255, 0.7);
			}

			@media (max-width: 600px) {
				body {
					padding: 2rem;
				}

				form {
					flex-direction: column;
					align-items: stretch;
				}

				button {
					width: 100%;
				}

				header,
				section {
					max-width: none;
				}

				section {
					text-align: left;
				}

				form {
					justify-content: flex-start;
				}
			}
		</style>
	</head>
	<body>
		<main>
			<header>
				<img class="logo" src="/images/logocoms.png" alt="Logotipo de Emurae" loading="lazy" />
			</header>
			<section>
				<h1>Próximamente</h1>
				<p>Estamos ultimando los detalles finales de nuestra próxima plataforma. Déjanos tu correo y te avisaremos en cuanto lancemos.</p>
				<form id="notify-form" novalidate>
					<input type="email" name="email" placeholder="tu@email.com" aria-label="Correo electrónico" />
					<button type="submit">Avisarme</button>
				</form>
				<p class="status" id="status-message" aria-live="polite"></p>
				<footer>Información puntual y relevante. Sin correos innecesarios.</footer>
			</section>
		</main>
		<script type="module">
			const form = document.querySelector("#notify-form");
			const status = document.querySelector("#status-message");

			if (form instanceof HTMLFormElement && status instanceof HTMLElement) {
				const button = form.querySelector("button");
				const emailInput = form.querySelector('input[type="email"]');

				form.addEventListener("submit", async (event) => {
					event.preventDefault();

					const email = emailInput?.value.trim() ?? "";

					if (!email) {
						status.dataset.state = "error";
						status.textContent = "Por favor, escribe tu correo.";
						emailInput?.focus();
						return;
					}

					status.dataset.state = "";
					status.textContent = "Enviando…";
					button?.setAttribute("disabled", "true");

					try {
						const response = await fetch("/api/subscribe", {
							method: "POST",
							headers: { "Content-Type": "application/json" },
							body: JSON.stringify({ email }),
						});

						if (!response.ok) {
							const data = await response.json().catch(() => ({}));
							throw new Error(data.error ?? "No fue posible completar la solicitud.");
						}

						status.dataset.state = "success";
						status.textContent = "Gracias. Te avisaremos en cuanto lancemos.";
						form.reset();
					} catch (error) {
						status.dataset.state = "error";
						status.textContent =
							error instanceof Error ? error.message : "Ocurrió un error inesperado. Intenta de nuevo.";
					} finally {
						button?.removeAttribute("disabled");
					}
				});
			}
		</script>
	</body>
</html>
